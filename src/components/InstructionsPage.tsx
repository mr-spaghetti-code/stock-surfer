import { Text } from '@react-three/drei';
import { useThree, useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import { useRef, useState } from 'react';
import AssetSelector, { Asset } from './AssetSelector';

interface InstructionsPageProps {
  onEnterGame: () => void;
  onAssetSelect: (_selectedAsset: Asset) => void;
  selectedAssetId: string;
}

const InstructionsPage = ({
  onEnterGame,
  onAssetSelect,
  selectedAssetId,
}: InstructionsPageProps) => {
  const { viewport } = useThree();
  const buttonGroupRef = useRef<THREE.Group>(null);
  const buttonRef = useRef<THREE.Mesh>(null);
  const [buttonHovered, setButtonHovered] = useState(false);

  // Create materials for the background cards
  const darkPanelMaterial = new THREE.MeshBasicMaterial({
    color: '#000033',
    transparent: true,
    opacity: 0.8,
  });

  const headerPanelMaterial = new THREE.MeshBasicMaterial({
    color: '#000055',
    transparent: true,
    opacity: 0.9,
  });

  const instructionsPanelMaterial = new THREE.MeshBasicMaterial({
    color: '#000022',
    transparent: true,
    opacity: 0.85,
  });

  // Button materials
  const buttonMaterial = new THREE.MeshBasicMaterial({
    color: buttonHovered ? '#4477ff' : '#3366ff',
  });

  const buttonBorderMaterial = new THREE.MeshBasicMaterial({
    color: '#8899ff',
    transparent: true,
    opacity: 0.7,
  });

  // Animation for the button
  useFrame((state) => {
    if (buttonGroupRef.current) {
      // Subtle floating animation for the button group
      const t = state.clock.getElapsedTime();
      buttonGroupRef.current.position.y = buttonY + Math.sin(t * 1.5) * 0.05;

      // Pulse effect when hovered
      if (buttonHovered && buttonRef.current) {
        const scale = 1 + Math.sin(t * 8) * 0.05; // Increased pulse effect
        buttonRef.current.scale.set(scale, scale, 1);
      } else if (buttonRef.current) {
        // Smooth transition back to normal size
        buttonRef.current.scale.lerp(new THREE.Vector3(1, 1, 1), 0.1);
      }
    }
  });

  // Calculate proper spacing based on viewport
  const panelHeight = viewport.height * 0.9;
  const titleSectionHeight = 2.5;
  const instructionsSectionHeight = 5.5;
  const assetSelectorHeight = 2.5;
  const buttonHeight = 1.5;

  // Calculate positions with proper spacing
  const titleSectionY = panelHeight / 2 - titleSectionHeight / 2;
  const instructionsSectionY =
    titleSectionY -
    titleSectionHeight / 2 -
    instructionsSectionHeight / 2 -
    0.5;
  const assetSelectorY =
    instructionsSectionY -
    instructionsSectionHeight / 2 -
    assetSelectorHeight / 2 -
    0.5;
  const buttonY =
    assetSelectorY - assetSelectorHeight / 2 - buttonHeight / 2 - 0.8;

  return (
    <group position={[0, 0, 0]}>
      {/* Main background panel */}
      <mesh position={[0, 0, -0.1]} material={darkPanelMaterial}>
        <planeGeometry args={[viewport.width * 0.9, panelHeight]} />
      </mesh>

      {/* Title Section */}
      <group position={[0, titleSectionY, 0]}>
        <mesh position={[0, 0, -0.05]} material={headerPanelMaterial}>
          <planeGeometry args={[viewport.width * 0.8, titleSectionHeight]} />
        </mesh>
        <Text
          position={[0, 0.5, 0]}
          fontSize={1.2}
          color="#ffffff"
          anchorX="center"
          anchorY="middle"
          font="/fonts/Orbitron-SemiBold.ttf"
        >
          SPACE SURFER
        </Text>
        <Text
          position={[0, -0.8, 0]}
          fontSize={0.6}
          color="#ffaa00"
          anchorX="center"
          anchorY="middle"
          font="/fonts/Orbitron-Medium.ttf"
        >
          Game Instructions
        </Text>
      </group>

      {/* Instructions Section */}
      <group position={[0, instructionsSectionY, 0]}>
        <mesh position={[0, 0, -0.05]} material={instructionsPanelMaterial}>
          <planeGeometry
            args={[viewport.width * 0.7, instructionsSectionHeight]}
          />
        </mesh>
        <Text
          position={[0, 2, 0]}
          fontSize={0.4}
          color="#ffffff"
          anchorX="center"
          anchorY="middle"
          maxWidth={viewport.width * 0.6}
        >
          Welcome to Space Surfer, where you navigate through a cosmic terrain
          influenced by real-time market data!
        </Text>

        <Text
          position={[0, 0.2, 0]}
          fontSize={0.35}
          color="#aaddff"
          anchorX="center"
          anchorY="middle"
          maxWidth={viewport.width * 0.6}
          lineHeight={1.6}
        >
          • Use WASD or Arrow Keys to control your ship
          {'\n'}• Avoid obstacles generated by market volatility
          {'\n'}• Higher market volatility = more difficult terrain
          {'\n'}• Your score increases as you survive longer
          {'\n'}• Press 'O' to toggle orbit controls for viewing
        </Text>

        <Text
          position={[0, -1.8, 0]}
          fontSize={0.35}
          color="#ffaa77"
          anchorX="center"
          anchorY="middle"
          maxWidth={viewport.width * 0.6}
          lineHeight={1.5}
        >
          The game uses real-time market data to generate the terrain.
          {'\n'}Higher volatility creates more challenging obstacles!
        </Text>
      </group>

      {/* Asset Selector Section */}
      <group position={[0, assetSelectorY, 0]}>
        <mesh position={[0, 0, -0.05]} material={instructionsPanelMaterial}>
          <planeGeometry args={[viewport.width * 0.5, assetSelectorHeight]} />
        </mesh>
        <AssetSelector
          onAssetSelect={onAssetSelect}
          selectedAssetId={selectedAssetId}
        />
      </group>

      {/* Enter Game Button - using a group to keep button and text together */}
      <group ref={buttonGroupRef} position={[0, buttonY, 0]}>
        {/* Button border */}
        <mesh position={[0, 0, -0.01]}>
          <planeGeometry args={[5.2, buttonHeight + 0.2]} />
          <primitive object={buttonBorderMaterial} attach="material" />
        </mesh>

        {/* Main button */}
        <mesh
          ref={buttonRef}
          onClick={onEnterGame}
          onPointerOver={() => setButtonHovered(true)}
          onPointerOut={() => setButtonHovered(false)}
          material={buttonMaterial}
        >
          <planeGeometry args={[5, buttonHeight]} />
        </mesh>
        <Text
          position={[0, 0, 0.1]}
          fontSize={0.6}
          color="#ffffff"
          anchorX="center"
          anchorY="middle"
          font="/fonts/Orbitron-Medium.ttf"
        >
          ENTER GAME
        </Text>
      </group>
    </group>
  );
};

export default InstructionsPage;
